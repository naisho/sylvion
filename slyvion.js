// http://www.zmangames.com/uploads/4/7/1/7/47170931/en-sylvion-rules-v3.pfd

// Import this file later
var intro = '{"_title":"Planting a Seed","_description":"This first step will allow you to start playing the game quickly, without having to read the rule book in its entirety. Playing this mode will introduce you to Sylvionâ€™s core concepts.","game":{"player":{"Sylvan":{"deck":[{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":0,"strength":1,"shortName":"F1"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":0,"strength":1,"shortName":"F1"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":1,"strength":2,"shortName":"F2"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":1,"strength":2,"shortName":"F2"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":2,"strength":3,"shortName":"F3"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":2,"strength":3,"shortName":"F3"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":3,"strength":4,"shortName":"F4"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":3,"strength":4,"shortName":"F4"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":0,"strength":0,"vitality":1,"shortName":"T1"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":0,"strength":0,"vitality":1,"shortName":"T1"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":1,"strength":0,"vitality":2,"shortName":"T2"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":1,"strength":0,"vitality":2,"shortName":"T2"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":2,"strength":0,"vitality":3,"shortName":"T3"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":2,"strength":0,"vitality":3,"shortName":"T3"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":3,"strength":0,"vitality":4,"shortName":"T4"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":3,"strength":0,"vitality":4,"shortName":"T4"},{"name":"Whale","faction":"Sylvan","type":"animal","cost":0,"effect":"move","target":"elemental","shortName":"W "},{"name":"Whale","faction":"Sylvan","type":"animal","cost":0,"effect":"move","target":"elemental","shortName":"W "},{"name":"Elephant","faction":"Sylvan","type":"animal","cost":1,"effect":"destroy","target":"elemental","shortName":"E "},{"name":"Elephant","faction":"Sylvan","type":"animal","cost":1,"effect":"destroy","target":"elemental","shortName":"E "},{"name":"Hedgehogs","faction":"Sylvan","type":"animal","cost":0,"effect":"counter","shortName":"HH"},{"name":"Hedgehogs","faction":"Sylvan","type":"animal","cost":0,"effect":"counter","shortName":"HH"},{"name":"Owl","faction":"Sylvan","type":"animal","cost":1,"effect":"draw","value":3,"target":"player","shortName":"Ow"},{"name":"Owl","faction":"Sylvan","type":"animal","cost":1,"effect":"draw","value":3,"target":"player","shortName":"Ow"}]},"Ravage":{"deck":[{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"}]}}}}';

// GAME LEVEL OBJECTS
// need to create card object
// function card(properties)
// this.properties = values

var game = {
    board: [],
    player: {
           Player1: {
               hand: []
           },
        Player2: {
            hand: []
        },
        Sylvan: {
            deck: [],
            discard: [],
        },
        Ravage: {
            deck: [],
            discard: [],
            stacks: [
                [], // stack1
                [], // stack2
                [], // stack3
                []  // stack4
            ]
        }
    },
    zone: {
        effects: [],
        RFG: [],
        selection: {
            card: {},
            target1: {},
            target2: {}
        }
    }
}; // var game

var gameBoard = game.board
var firstPlayer = game.player.Player1
var sylvanPlayer = game.player.Sylvan
var sylvanDeck = game.player.Sylvan.deck
var sylvanDiscard = game.player.Sylvan.discard
var ravagePlayer = game.player.Ravage
var ravageDeck = game.player.Ravage.deck
var ravageDiscard = game.player.Ravage.discard
var ravageStacks = game.player.Ravage.stacks
var secondPlayer = game.player.Player2
var effectsZone = game.zone.effects
var rfgZone = game.zone.RFG
var historyZone = game.zone.history
var selectedCard = game.zone.selection.card
var selectedTarget1 = game.zone.selection.target1
var selectedTarget2 = game.zone.selection.target2















// HELPER FUNCTIONS
// Fisher-Yates Shuffle
function shuffle(r){for(var f,n,o=r.length;o;)n=Math.floor(Math.random()*o--),f=r[o],r[o]=r[n],r[n]=f;return r}

// map card names of array
function cardNames(cards) {
    return cards.map(function(a) {return a.name});
}

// show current board using short names
function showBoard() {
    horizontalLine();
    for (var i = 1; i <= 6; i++) {
        var text = 'console.log("Row#",i'
        for (var j = 1; j <= 6; j++) {
            text = text + ",game.board[i][" + j + "][0].shortName"
        }
        text = text + ");"
        eval(text);
        // console.log(game.board[i][0].shortName);
        // console.log(eval(text));
        // console.log(game.board[i]);
    }
}

// show Player1.hand with array index
function showHand() {
	horizontalLine();
	for (var i = 0; i < firstPlayer.hand.length; i++) {
		console.log(i,firstPlayer.hand[i].name,firstPlayer.hand[i].shortName);
	}
}


// provide spacing between output
function horizontalLine() {
    console.log("*****");
}
function horizontalLine2() {
    console.log("==========");
}

function emptyCard() {
    var newCard = {"shortName":"__"}
    // clone newCard object
    return JSON.parse(JSON.stringify(newCard))
}

function ForBattlefield(func) {
    for (var x = 2; x <= 5; x++) {
        for (var y = 2; y <= 5; y++) {
            eval(func);
        }
    }
}

function ForExtendedBattlefield(func) {
    for (var x = 2; x <= 5; x++) {
        for (var y = 2; y <= 6; y++) {
            eval(func);
        }
    }
}














// GAME FUNCTIONS
// (all individual card effects are in a different section)

// draw cards 
function draw(noOfCards, target) {
    for (var i = noOfCards; i >= 1; i--) {
        game.player[target].hand.unshift(sylvanDeck.shift());
        console.log(" --> Drew card: " + game.player[target].hand[0].name);
    }
}


// set life total and update edge cards
function setLifeTotal(life) {
    // define location and order of edge cards
    var b = game.board;
    var edge = [
            b[1][5], b[1][4], b[1][3], b[1][2], // top edge
            b[2][1], b[3][1], b[4][1], b[5][1], // left edge
            b[6][2], b[6][3], b[6][4], b[6][5]  // bot edge
               ]

    for (var i = 0; i < life ; i++) {
        edge[i][0].shortName = "B "; // bloom
        console.log("Bloom");
    }

    for (var j = life; j < 12 ; j++) {
        edge[j][0].shortName = "D " // desolated
    }
    console.log("life total set to " + life);
    return life
} // setLifeTotal()

// define battlefield area
// probably dont need this
function battlefield(x, y) {
    return game.board[x+1][y+1];
}

// load game type like First Game, Beginner, Advanced, Expansion 1, etc.
function load(file) {
    // load expansion
    var expansion = JSON.parse(file);

    var sylvanExpansion = expansion.game.player.Sylvan.deck
    var ravageExpansion = expansion.game.player.Ravage.deck


    var id = 0 // unique id for each card
    // add sylvan cards from expansion into current game
    for (var i = sylvanExpansion.length - 1; i >= 0; i--) {
         sylvanExpansion[i].id = id++
         sylvanDeck.push(sylvanExpansion[i]);
    }
    console.log("loaded Sylvan deck");
    // console.log(game.player.Sylvan.deck);
    // add ravage cards from expansion into current game
    for (var i = ravageExpansion.length - 1; i >= 0; i--) {
        ravageExpansion[i].id = id++
          ravageDeck.push(ravageExpansion[i]);
    }
    console.log("loaded Ravage deck");
    // console.log(game.player.Ravage.deck);
} // load()

/*// play a card
function playCard(x,y) {
    horizontalLine();
    console.log("Resolving",game.board[x][y].name);
    resolve(game.board[x][y].effect,game.board[x][y].value);
    if (game.board[x][y].type == "support") {
        discard(x-1,y-1);
        remove(x-1,y-1);
    }
}*/

//new playcard
function playCard(card,origin,target) {
    horizontalLine();
    console.log("Resolving",card.name);
    resolve(card.effect,card.value);
    discard(card);
}




// 4. DEFENSE
function selectCardFromHand(index) {
    selectedCard = firstPlayer.hand[index]
    // console.log("Selected",selectedCard.name,selectedCard.shortName);
    return "Selected " + selectedCard.name + " (" + selectedCard.shortName + ")"
}

function deselectCard() {
    selectedCard = {}
    return "Deselected all cards"
}

function selectTarget1(target) {
    selectedTarget1 = target
    return "Selected " + selectedTarget1.name + " (" + selectedTarget1.shortName + ")" + " as primary target"
}

function selectTarget2(target) {
    selectedTarget2 = target
    return "Selected " + selectedTarget2.name + " (" + selectedTarget2.shortName + ")" + " as secondary target"
}


function deselectTargets() {
    selectedTarget = {}
    selectedTarget2 = {}
    return "Deselected all targets"
}


function playCardFromHand() {
    // var card = firstPlayer.hand[n]
    // var card = firstPlayer.hand.splice(n,1)[0]
    if ((selectedCard.target == selectedTarget1.type) || !(selectedCard.target)) {
        console.log("I can play this card")
        playCard(selectedCard,selectedTarget1,selectedTarget2);
        var indexOfCard = firstPlayer.hand.map(function(i){return i.id}).indexOf(selectedCard.id)
        firstPlayer.hand.splice(indexOfCard,1);
        discard(selectedCard);
        selectedCard = emptyCard();
        showHand();
    } else {
        console.log("Can't play this card")
    }
    // playCard(card);
    // whale
    // elephant
    // hedgehogs
    // owl
}

/*
// will not implement due to complexity
// alternative: save game state every action
function undo(noOfEffects) {
    // repeat effect with destination and origin swapped
    // works for: move, simoon
    // doesn't work for: combat, elementals, blaze
    
    // reverse blaze
    // remove all current elementals from the game
    // return all elementals discarded by last blaze
    // requires: original position
}
*/

// card effects
// Ravage
function resolve(effect, value) {
    switch(effect) {
        case "pump":
            // for each grid cell, check if card type elemental then switch/case 1=>2, 2=>3, 3=>4, 0=>4
            for (var x = 2; x <= 5; x++) {
                for (var y = 2; y <= 6; y++) {
                    var currentCard = gameBoard[x][y][0];
                    if (currentCard.type == "elemental") {
                        // increase elemental strength
                        var newStr = [4,2,3,4,4][currentCard.strength]
                        if (currentCard.strength != newStr) {
                            var newShortName = "B" + newStr
                            var newCard = {"name":"Blazing Elemental", "faction":"Ravage", "type":"elemental", "strength":newStr, "shortName":newShortName};
                            console.log("Increasing",currentCard.shortName,"to",newStr);
                            discard(currentCard);
                            gameBoard[x][y] = [newCard]
                            // Object.assign(currentCard,newCard);
                            // discard(x,y);
                        }
                    }
                }
            }
            break;

        case "move":
            // for each grid cell, check if card type elemental then move left %value spaces
            /*for (var x = 2; x <= 5; x++) {
                for (var y = 2; y <= 6; y++) {
                    var currentCard = gameBoard[x][y][0];
                    if (currentCard.type == "elemental") {
                        moveElemental([x,y],[x,y-value]);
                    }
                }
            }*/
            ForExtendedBattlefield('\
                var currentCard = gameBoard[x][y][0];\
                if (currentCard.type == "elemental") {\
                    moveElemental([x,y],[x,y-' + value + ']);\
                }\
            ');

            // console.log("move");
            break;

        default:
            console.log("This card has no effect");
            if (selectedCard.type == "fountain" || "tree") {
                selectedTarget1[0] = selectedCard
            }
    }
}



// move elemental card
// used in: simoon, move phase, whale
function moveElemental(from, to) {
    // if destination has a fountain/tree, call combat function
    var origin = gameBoard[from[0]][from[1]]
    var destination = gameBoard[to[0]][to[1]]
    var currentCard = origin[0]
    // console.log(origin);
    console.log("Moving",currentCard.shortName);
    if (destination[0].faction == "Sylvan") {
        combat(orign, destination);
    }
    // Object.assign(destination,origin);
    // removeFromBoard(from[0],fromz[1]);
    destination.pop();
    destination.push(origin.shift());
    origin.push(emptyCard());
}


/*
// old discard
function discard(x, y) {
    var currentCard = battlefield(x,y);
    // clone object by converting to JSON
    game.player[currentCard.faction].discard.push(JSON.parse(JSON.stringify(currentCard)));
}
*/

// new discard
function discard(card) {
    game.player[card.faction].discard.unshift(card);
    return card.name
}

/*
// old remove
function remove(x,y) {
    var currentCard = battlefield(x,y);
    // console.log("Removing",currentCard)
    game.board[x+1][y+1] = {"shortName":"__"}
}
*/

function removeFromBoard(x,y) {
    var currentCard = gameBoard[x][y][0]
    console.log("Removing",currentCard.name,"(",currentCard.shortName,")");
    gameBoard[x][y] = [emptyCard()]
}



function combat() {
// compare toughness and strength
// move loser to discard


// need to replace each board space with array so multiple objects can bei n the same space
}













// START NEW GAME
function newGame() {
    // Populate game.board with "__" to provide spacing
    game.board.push([]);
    for (var i = 1; i <= 6; i++) { // for col 1-6
        gameBoard.push([]); // create array for rows
        gameBoard[i].push([]); // create stack in each cell
        for (var j = 1; j <= 6; j++) {
            gameBoard[i].push([emptyCard()]); // fill each cell with emptyCard()
        }
    }
    // Below code was not used because all objects created shared the same instance in each row
    // game.board[i] = new Array(6).fill(new Object({}));
    // game.board[i] = [{"shortName":"01"},{"shortName":"02"},{"shortName":"03"},{"shortName":"_4"},{"shortName":"_5"},{"shortName":"_6"}]

    // load decks
    load(intro);
    game.player.Sylvan.lifeTotal = setLifeTotal(6); // life total should be added into expansion to allow for difficulty settings
    showBoard();

    // shuffle decks
    shuffle(sylvanDeck);
    shuffle(ravageDeck);

    // divide Ravage deck into 4 stacks
    // stacks are game.player.Ravage.stack1, stack2, etc.
    // console.log("ravageDeck:", ravageDeck.length);
    for (var stackNumber = 0; stackNumber <= 3; stackNumber++) {
        for (var cardsPerStack = ravageDeck.length/4-1; cardsPerStack >= 0; cardsPerStack--) {
            game.player.Ravage.stacks[stackNumber].push(ravageDeck[cardsPerStack+stackNumber*ravageDeck.length/4]);
            // console.log("Stack#",stackNumber,"Card#",cardsPerStack+stackNumber*ravageDeck.length/4,game.player.Ravage.stacks[stackNumber]);
        }
    }


    draw(8,"Player1");
//     console.log("Player1's Hand",cardNames(game.player.Player1.hand));
//     console.log("Sylvan Deck",cardNames(game.player.Sylvan.deck));
    
    horizontalLine2();
    console.log("Begin First Battle Phase");
} // newGame()







// BATTLE PHASE
function battle() {
    // 1. Reveal Ravage Cards
        // add "visible": "Player1" when implementing multiplayer
        // reveal top card of each Ravage stack (move from deck to [i][6])
        for (var i = 2; i <= 5; i++) {
            // console.log(game.player.Ravage.stacks[i-1]);
            gameBoard[i][6].pop(); // remove emptyCard
            gameBoard[i][6].push(ravageStacks[i-2].shift());
        }

        showBoard();

        // Add all effects to stack
        for (var i = 2; i <= 5; i++) {
            effectsZone.push(gameBoard[i][6][0]);
        }

        // Resolve effects based on priority
            // only priorities A, B, C, D
            // elementals have no effect
        for (var i = 0; i < 4; i++) {
            horizontalLine2();
            console.log("Resolving priority " + String.fromCharCode(65+i) + " cards");
            for (var j = 0; j < effectsZone.length; j++) {
                var currentCard = effectsZone[j]
                if (currentCard.priority == String.fromCharCode(65+i)) {
                    playCard(currentCard);
                    removeFromBoard(j+2,6);
                }
            }
        }






            // console.log(game.board[2][6]);

            
            // remove(1,5);
            // console.log(game.board[3][6]);
            // resolve(game.board[3][6].effect,game.board[3][6].value);
            // remove(2,5);
            // console.log(game.board[4][6]);
            // resolve(game.board[4][6].effect,game.board[4][6].value);
            // remove(3,5);
            // console.log(game.board[5][6]);

    // 2. Move Elementals
        // for battlefield, if type=elemental, call function moveElemental(-1,0)
        horizontalLine();
        console.log("Move Elementals");
        resolve("move",1);
        //show board after moving
        showBoard();






    // 3. Reinforcements
        horizontalLine();
        console.log("Get Reinforcements");
        draw(3,"Player1");

    // 4. Defense
        // require console input
        // console.log("Player1's Hand",cardNames(firstPlayer.hand));
        showHand();
        // playCardFromHand(card#)




        // moveElemental(copy?) card to stack
        // select cards to pay (mana pool - cost)
        // if cant pay, return card to same spot in hand
        // select targets if any
        // resolve effects

    // 5. Show Board
    // showBoard();






    return "*****"
}
newGame();
battle();