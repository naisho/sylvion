// http://www.zmangames.com/uploads/4/7/1/7/47170931/en-sylvion-rules-v3.pdf

// Import this file later
intro = '{"_title":"Planting a Seed","_description":"This first step will allow you to start playing the game quickly, without having to read the rule book in its entirety. Playing this mode will introduce you to Sylvionâ€™s core concepts.","game":{"player":{"Sylvan":{"deck":[{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":0,"strength":1,"shortName":"F1"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":0,"strength":1,"shortName":"F1"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":1,"strength":2,"shortName":"F2"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":1,"strength":2,"shortName":"F2"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":2,"strength":3,"shortName":"F3"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":2,"strength":3,"shortName":"F3"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":3,"strength":4,"shortName":"F4"},{"name":"Fountain","faction":"Sylvan","type":"fountain","cost":3,"strength":4,"shortName":"F4"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":0,"strength":0,"vitality":1,"shortName":"T1"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":0,"strength":0,"vitality":1,"shortName":"T1"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":1,"strength":0,"vitality":2,"shortName":"T2"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":1,"strength":0,"vitality":2,"shortName":"T2"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":2,"strength":0,"vitality":3,"shortName":"T3"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":2,"strength":0,"vitality":3,"shortName":"T3"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":3,"strength":0,"vitality":4,"shortName":"T4"},{"name":"Tree","faction":"Sylvan","type":"tree","cost":3,"strength":0,"vitality":4,"shortName":"T4"},{"name":"Whale","faction":"Sylvan","type":"animal","cost":0,"effect":"move","target":"elemental","shortName":"W "},{"name":"Whale","faction":"Sylvan","type":"animal","cost":0,"effect":"move","target":"elemental","shortName":"W "},{"name":"Elephant","faction":"Sylvan","type":"animal","cost":1,"effect":"destroy","target":"elemental","shortName":"E "},{"name":"Elephant","faction":"Sylvan","type":"animal","cost":1,"effect":"destroy","target":"elemental","shortName":"E "},{"name":"Hedgehogs","faction":"Sylvan","type":"animal","cost":0,"effect":"counter","shortName":"HH"},{"name":"Hedgehogs","faction":"Sylvan","type":"animal","cost":0,"effect":"counter","shortName":"HH"},{"name":"Owl","faction":"Sylvan","type":"animal","cost":1,"effect":"draw","value":3,"target":"player","shortName":"Ow"},{"name":"Owl","faction":"Sylvan","type":"animal","cost":1,"effect":"draw","value":3,"target":"player","shortName":"Ow"}]},"Ravage":{"deck":[{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":0,"shortName":"E0"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":1,"shortName":"E1"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":2,"shortName":"E2"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Elemental","faction":"Ravage","type":"elemental","cost":0,"strength":3,"shortName":"E3"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Blaze","faction":"Ravage","type":"support","cost":0,"effect":"pump","priority":"C","shortName":"Bz"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"},{"name":"Simoon","faction":"Ravage","type":"support","cost":0,"effect":"move","value":1,"priority":"D","shortName":"Sm"}]}}}}';

// Top Level Objects
// object Game
var game = {
	board: [],
	player: {
   		Player1: {
   			hand: []
   		},
		Player2: {
			hand: []
		},
    	Sylvan: {
    		deck: [],
    		discard: [],
    	},
		Ravage: {
			deck: [],
			discard: [],
			stacks: [
				[], // stack1
				[], // stack2
				[], // stack3
				[]  // stack4
			]
		}
	},
	zone: {
		effects: [],
		RFG: []
	}
}; // var game

	// define battlefield area
	function battlefield(x, y) {
		return game.board[x+1][y+1];
	}
	// game.board[2][2]="test";
	// console.log(game.board);
	// game.board[2][2]="test";
	// console.log(battlefield(1,1));

// Load game type like First Game, Beginner, Advanced, Expansion 1, etc.
function load(file) {
	// load expansion
	expansion = JSON.parse(file);
	// add sylvan cards from expansion into current game
	for (var i = expansion.game.player.Sylvan.deck.length - 1; i >= 0; i--) {
 		game.player.Sylvan.deck.push(expansion.game.player.Sylvan.deck[i]);
	}
	console.log("loaded Sylvan deck");
	// console.log(game.player.Sylvan.deck);
	// add ravage cards from expansion into current game
	for (var i = expansion.game.player.Ravage.deck.length - 1; i >= 0; i--) {
  		game.player.Ravage.deck.push(expansion.game.player.Ravage.deck[i]);
	}
	console.log("loaded Ravage deck");
	// console.log(game.player.Ravage.deck);
} // load()

// Fisher-Yates Shuffle
function shuffle(r){for(var f,n,o=r.length;o;)n=Math.floor(Math.random()*o--),f=r[o],r[o]=r[n],r[n]=f;return r}

// Set life total and update Bloom/Desolated cards
function setLifeTotal(life) {
	// Define location and order of Edge cards
	edge = [game.board[1][5],
			game.board[1][4],
			game.board[1][3],
			game.board[1][2],
			game.board[2][1],
			game.board[3][1],
			game.board[4][1],
			game.board[5][1],
			game.board[6][2],
			game.board[6][3],
			game.board[6][4],
			game.board[6][5]
		]

	for (var i = 0; i < life ; i++) {
		edge[i].shortName = "B ";
	}

	for (var j = life; j < 12 ; j++) {
		edge[j].shortName = "D "
	}
	console.log("Life total set to " + life);
	return life
} // setLifeTotal()

function newGame() {
	// Populate game.board with "__" to provide spacing
	game.board.push([]);
	for (var i = 1; i <= 6; i++) {
		game.board.push([]);
		game.board[i].push({});
		for (var j = 1; j <= 6; j++) {
			game.board[i].push({"shortName":"__"});
		}
	}
	// Below code was not used because all objects created shared the same instance in each row
	// game.board[i] = new Array(6).fill(new Object({}));
	// game.board[i] = [{"shortName":"01"},{"shortName":"02"},{"shortName":"03"},{"shortName":"_4"},{"shortName":"_5"},{"shortName":"_6"}]

	// load decks
	load(intro);
	game.player.Sylvan.lifeTotal = setLifeTotal(6); // life total should be added into expansion to allow for difficulty settings

	// shuffle decks
	shuffle(game.player.Sylvan.deck);
	shuffle(game.player.Ravage.deck);

	// divide Ravage deck into 4 stacks
	// stacks are game.player.Ravage.stack1, stack2, etc.
	var ravageDeck = game.player.Ravage.deck;
	console.log("ravageDeck:", ravageDeck.length);
	for (var stackNumber = 0; stackNumber <= 3; stackNumber++) {
		for (var cardsPerStack = ravageDeck.length/4-1; cardsPerStack >= 0; cardsPerStack--) {
			game.player.Ravage.stacks[stackNumber].push(ravageDeck[cardsPerStack+stackNumber*ravageDeck.length/4]);
			// console.log("Stack#",stackNumber,"Card#",cardsPerStack+stackNumber*ravageDeck.length/4,game.player.Ravage.stacks[stackNumber]);
		}
	}

	// Starting Hand: draw 8 cards
	function draw(noOfCards, target) {
		for (var i = noOfCards; i >= 1; i--) {
			game.player[target].hand.push(game.player.Sylvan.deck.pop());
		}
	}

	draw(8,"Player1");
	console.log("Player1's Hand",cardNames(game.player.Player1.hand));
	console.log("Sylvan Deck",cardNames(game.player.Sylvan.deck));
} // newGame()

// map card names of array of cards
function cardNames(cards) {
	return cards.map(function(a) {return a.name});
}

// alternate console log for objects
function log(obj) {
	console.log(JSON.parse(JSON.stringify(obj)));
}

// show board using short names
function showBoard() {
	console.log("*****");
	for (var i = 1; i <= 6; i++) {
		var text = 'console.log("Row#",i'
		for (var j = 1; j <= 6; j++) {
			text = text + ",game.board[i][" + j + "].shortName"
		}
		text = text + ");"
		eval(text);
		// console.log(game.board[i][0].shortName);
		// console.log(eval(text));
		// console.log(game.board[i]);
	}
}


// BATTLE PHASE
function battle() {
	// 1. Reveal Ravage Cards
		// add "visible": "Player1"
		// console.log(cardNames(game.player.Ravage.stacks[0]));
		// console.log("RavageStack1:" + game.player.Ravage.stacks[0][0].effect);
		// console.log("RavageStack2:" + game.player.Ravage.stacks[1][0].effect);
		// console.log("RavageStack3:" + game.player.Ravage.stacks[2][0].effect);
		// console.log("RavageStack4:" + game.player.Ravage.stacks[3][0].effect);
		for (var i = 2; i <= 5; i++) {
			// console.log(game.player.Ravage.stacks[i-1]);
			game.board[i][6] = game.player.Ravage.stacks[i-2].shift()
		}

		showBoard();

		// Add all effects to stack
		game.zone.effects = [2,3,4,5]


		// Resolve effects based on priority
			// only priorities A, B, C, D
			// elementals have no effect
		for (var i = 0; i < 4; i++) {
			console.log("*****");
			console.log("Resolving priority " + String.fromCharCode(65+i) + " cards");
			for (var j = 0; j < game.zone.effects.length; j++) {
				if (game.board[game.zone.effects[j]][6].priority == String.fromCharCode(65+i)) {
					playCard(game.zone.effects[j],6);
				}
			}
		}

		// effects moved to the end for clarity
		// change playcard to accept card object
			function playCard(x,y) {
				console.log("*****");
				console.log("Resolving",game.board[x][y].name);
				resolve(game.board[x][y].effect,game.board[x][y].value);
				if (game.board[x][y].type == "support") {
					discard(x-1,y-1);
					remove(x-1,y-1);
				}
			}


			//new playcard
			/*
			function playCard(card) {
				console.log("*****");
				console.log("Resolving",card.name);
				resolve(card);
				discard(card);
			}
			*/

			// console.log(game.board[2][6]);

			
			// remove(1,5);
			// console.log(game.board[3][6]);
			// resolve(game.board[3][6].effect,game.board[3][6].value);
			// remove(2,5);
			// console.log(game.board[4][6]);
			// resolve(game.board[4][6].effect,game.board[4][6].value);
			// remove(3,5);
			// console.log(game.board[5][6]);

	// 2. Move Elementals
		// for battlefield, if type=elemental, call function moveElemental(-1,0)
		console.log("*****");
		console.log("Move Elementals");
		resolve("move",1);


		function moveElemental(from, to) {
			// if destination has a fountain/tree, call combat function
			origin = battlefield(from[0],from[1])
			destination = battlefield(to[0],to[1])
			console.log("Moving",origin.shortName);
			if (destination.faction == "Sylvan") {
				combat(orign, destination);
			}
			Object.assign(destination,origin);
			remove(from[0],from[1]);
		}

		function discard(x, y) {
			var currentCard = battlefield(x,y);
			// clone object by converting to JSON
			game.player[currentCard.faction].discard.push(JSON.parse(JSON.stringify(currentCard)));

		}

		function remove(x,y) {
			var currentCard = battlefield(x,y);
			// console.log("Removing",currentCard)
			game.board[x+1][y+1] = {"shortName":"__"}
		}

		function combat() {
		// compare toughness and strength
		// move loser to discard


		// need to replace each board space with array so multiple objects can bei n the same space
		}

	// 3. Reinforcements
		// draw(3?)

	// 4. Defense
		// require console input
		// playCard(card#fromleft)
		// moveElemental(copy?) card to stack
		// select cards to pay (mana pool - cost)
		// if cant pay, return card to same spot in hand
		// select targets if any
		// resolve effects


	// 5. Show Board
	showBoard();


// card effects
	// Ravage
	function resolve(ravageEffect, value) {
		switch(ravageEffect) {
			case "pump":
				// for each grid cell, check if card type elemental then switch/case 1=>2, 2=>3, 3=>4, 0=>4
				for (var x = 1; x <= 4; x++) {
					for (var y = 1; y <= 5; y++) {
						var currentCard = battlefield(x,y);
						if (currentCard.type == "elemental") {
							// increase elemental strength
							newStr = [4,2,3,4,4][currentCard.strength]
							if (currentCard.strength != newStr) {
								newShortName = "B" + newStr
								newCard = {"name":"Blazing Elemental", "faction":"Ravage", "type":"elemental", "cost":0, "strength":newStr, "shortName":newShortName};
								console.log("Increasing",currentCard.shortName,"to",newStr);
								Object.assign(currentCard,newCard);
								discard(x,y);
							}
						}
					}
				}
				break;

			case "move":
				// for each grid cell, check if card type elemental then move left %value spaces
				for (var x = 1; x <= 4; x++) {
					for (var y = 1; y <= 5; y++) {
						var currentCard = battlefield(x,y);
						if (currentCard.type == "elemental") {
							moveElemental([x,y],[x,y-value]);
						}
					}
				}
				// console.log("move");
				break;
			default:
				console.log("no effect");
		}
	}



	return "*****"
}
newGame();
battle();